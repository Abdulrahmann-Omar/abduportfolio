---
import Button from '../ui/Button.astro';
---

<section id="home" class="min-h-screen flex items-center relative overflow-hidden">
  <!-- Matrix Background -->
  <div class="fixed inset-0 z-0">
    <canvas 
      id="matrix-canvas" 
      class="w-full h-full"
      aria-hidden="true"
    ></canvas>
  </div>
  
  <div class="container mx-auto px-6 relative z-10">
    <div class="max-w-4xl mx-auto text-center">
      <div class="inline-block px-4 py-2 mb-6 bg-matrix-green/10 border border-matrix-green/30 rounded-full text-matrix-green text-sm font-mono">
        Welcome to my digital realm
      </div>
      
      <h1 class="text-5xl md:text-7xl font-bold mb-6 leading-tight">
        <span class="text-white">Hi, I'm</span>{' '}
        <span class="text-matrix-green glow">Abdulrahman Omar</span>
      </h1>
      
      <div class="h-16 md:h-20 mb-8">
        <div class="typewriter text-2xl md:text-4xl font-mono text-gray-300">
          <span class="text-matrix-green">$</span> I build intelligent systems that solve real-world problems
        </div>
      </div>
      
      <p class="text-lg md:text-xl text-gray-400 mb-12 max-w-3xl mx-auto leading-relaxed">
        AI Engineer & Data Scientist specializing in building intelligent systems and extracting insights from complex data.
        Currently pushing the boundaries of what's possible with machine learning and artificial intelligence.
      </p>
      
      <div class="flex flex-wrap justify-center gap-4">
        <Button href="#projects" variant="primary" class="group">
          <span>View My Work</span>
          <svg
            class="w-5 h-5 ml-2 group-hover:translate-x-1 transition-transform"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M14 5l7 7m0 0l-7 7m7-7H3"
            ></path>
          </svg>
        </Button>
        
        <Button href="#contact" variant="outline">
          Get In Touch
        </Button>
      </div>
    </div>
  </div>
  
  <div class="absolute bottom-10 left-1/2 transform -translate-x-1/2 animate-bounce">
    <a
      href="#about"
      class="text-matrix-green hover:text-white transition-colors duration-300"
      aria-label="Scroll down"
    >
      <svg
        class="w-8 h-8"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M19 14l-7 7m0 0l-7-7m7 7V3"
        ></path>
      </svg>
    </a>
  </div>
</section>

<style>
  .typewriter {
    border-right: 2px solid #0f0;
    white-space: nowrap;
    overflow: hidden;
    display: inline-block;
    animation: 
      blink-caret 0.75s step-end infinite,
      typing 3.5s steps(40, end);
  }

  @keyframes typing {
    from { width: 0 }
    to { width: 100% }
  }

  @keyframes blink-caret {
    from, to { border-color: transparent }
    50% { border-color: #0f0; }
  }
  
  #matrix-canvas {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw !important;
    height: 100vh !important;
  }
</style>

<script>
class MatrixEffect {
  constructor(canvasId) {
    this.canvas = document.getElementById(canvasId);
    if (!this.canvas) return;
    
    this.ctx = this.canvas.getContext('2d');
    this.characters = '01';
    this.fontSize = 14;
    this.drops = [];
    this.animationId = null;

    this.resizeHandler = () => this.init();
    window.addEventListener('resize', this.resizeHandler);

    this.init();
  }

  init() {
    if (!this.canvas || !this.ctx) return;
    
    this.canvas.width = window.innerWidth;
    this.canvas.height = window.innerHeight;
    this.columns = Math.floor(this.canvas.width / this.fontSize);
    this.drops = Array(this.columns).fill(1);

    if (!this.animationId) this.animate();
  }

  draw() {
    if (!this.ctx) return;
    this.ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';
    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
    
    this.ctx.fillStyle = '#0f0';
    this.ctx.font = `${this.fontSize}px 'Fira Code', monospace`;

    for (let i = 0; i < this.drops.length; i++) {
      const text = this.characters.charAt(Math.floor(Math.random() * this.characters.length));
      const x = i * this.fontSize;
      const y = this.drops[i] * this.fontSize;
      this.ctx.fillText(text, x, y);

      if (y > this.canvas.height && Math.random() > 0.975) {
        this.drops[i] = 0;
      }
      this.drops[i]++;
    }
  }

  animate() {
    this.draw();
    this.animationId = requestAnimationFrame(() => this.animate());
  }

  destroy() {
    cancelAnimationFrame(this.animationId);
    window.removeEventListener('resize', this.resizeHandler);
  }
}

document.addEventListener('astro:page-load', () => {
  const effect = new MatrixEffect('matrix-canvas');
  window.matrixEffect = effect;
});

window.addEventListener('beforeunload', () => {
  if (window.matrixEffect) window.matrixEffect.destroy();
});
</script>
